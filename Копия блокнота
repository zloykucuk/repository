{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"13uG5o_VYC62jINUENeZ0G7xfzcXJTrCj","timestamp":1696058927161}],"authorship_tag":"ABX9TyMbdRvG9MKqg0WEgEhCnBTj"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!git push https://github.com/zloykucuk/repository.git"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F95N0abG9PFB","executionInfo":{"status":"ok","timestamp":1696058407847,"user_tz":-180,"elapsed":10,"user":{"displayName":"Олег","userId":"10205845955787477479"}},"outputId":"11e3d1ba-8f64-45fc-bef5-ab39d5bdd4d5"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["fatal: not a git repository (or any of the parent directories): .git\n"]}]},{"cell_type":"code","execution_count":10,"metadata":{"id":"z16smhMunWPh","executionInfo":{"status":"ok","timestamp":1696058641675,"user_tz":-180,"elapsed":15,"user":{"displayName":"Олег","userId":"10205845955787477479"}}},"outputs":[],"source":["import pandas as pd\n","import spacy\n","import numpy as np\n","import scipy\n","import nltk\n","import re # вместо string в питоне\n","#textstatistic"]},{"cell_type":"code","source":["# import textstat\n","# lang = \"ru\"\n","# textstat.set_lang(lang)"],"metadata":{"id":"1xJ1SVcE4pfW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["nltk.download(\"stopwords\") # поддерживает удаление стоп-слов\n","nltk.download('punkt') # делит текст на список предложений\n","nltk.download('wordnet') # проводит лемматизацию\n","from nltk.corpus import stopwords"],"metadata":{"id":"YOoaF-M45daJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["stopwords.words('russian')\n","#nltk.word_tokenize(text,language = \"russian\")"],"metadata":{"id":"Ls5TFu41ngeJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import files\n","uploaded = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"AU4y870ws3yI","executionInfo":{"status":"ok","timestamp":1696055759478,"user_tz":-180,"elapsed":5574,"user":{"displayName":"Олег","userId":"10205845955787477479"}},"outputId":"8f80d30f-fb85-4684-c6a0-22024cf0d239"},"execution_count":39,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-bf00ac19-c447-41fa-9536-02f9b4ee28a9\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-bf00ac19-c447-41fa-9536-02f9b4ee28a9\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving human.csv to human.csv\n"]}]},{"cell_type":"code","source":["TD = pd.read_csv(\"gpt.csv\", delimiter='\\t')"],"metadata":{"id":"E6eJVfk9uFil","executionInfo":{"status":"ok","timestamp":1696058684167,"user_tz":-180,"elapsed":326,"user":{"displayName":"Олег","userId":"10205845955787477479"}}},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":["преобразовать в текст, векторизировать одну запись, посмотреть и исправить что не нравится в записи (переделать на русский язык, запятаяЮ предлог), сделать повторую векторизацию (измененного текста), космотреть косинусное расстрояние между двумя вектрами)\n","\n","---\n","\n"],"metadata":{"id":"6RN5DTbx4ZUw"}}]}